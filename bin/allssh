#! /bin/bash

[[ -L $0 ]] && SCRIPT_FILE=`readlink -fn $0` || SCRIPT_FILE=$0
pushd `dirname "${SCRIPT_FILE}"` >/dev/null
BASE_DIR=`pwd`
popd >/dev/null

source "${BASE_DIR}/common.sh" || exit 1

FUNC_FILE_CONFIG="${BASE_DIR}/config.sh"
FUNC_FILE_REMOTE="${BASE_DIR}/remote.sh"
import_functions

# apply alias config
[[ -f ~/.bashrc ]] && source ~/.bashrc
[[ -f ~/.bash_profile ]] && source ~/.bash_profile

function _help() {
    local _CMD
    _CMD=`basename $0`
    printf "%s\n" "Usage: ${_CMD} [-u {user_name}] [-H {host_name}] [-p {host_port}] [-g {host_group_name}] commands"
    printf "%$((7+${#_CMD}-2))s  %s\n" "-u" "specify user name used in ssh connection, if not specified, local user will be used."
    printf "%$((7+${#_CMD}-2))s  %s\n" "-H" "specify a ssh host to connect to."
    printf "%$((7+${#_CMD}-2))s  %s\n" "-p" "specify a ssh port to connect to, if not specified, default[22] port will be used."
    printf "%$((7+${#_CMD}-2))s  %s\n" "-g" "specify a ssh host group, if not specified, all hosts in \"/etc/hosts\" except localhost will be used."
}

while getopts :u:H:p:g:h FLAG; do
    case $FLAG in
        g)
            GROUP_NAME=${OPTARG}
        ;;
        u)
            REMOTE_USER=${OPTARG}
        ;;
        H)
            REMOTE_HOST=${OPTARG}
        ;;
        p)
            REMOTE_PORT=${OPTARG}
        ;;
        h)
            _help >&2
            exit
        ;;
        *)
            _help >&2
            exit 1
        ;;
    esac
done
shift $((OPTIND - 1))

CMD=$'\n' read -d'' -r -a DANGEROUS <"${BASE_DIR}/.dangerous"
CMD=$'\n' read -d'' -r -a IGNORE <"${BASE_DIR}/.ignore"

for CMD in ${IGNORE[@]}; do
    if [[ $1 == ${CMD} || $1 =~ ^${CMD}( )+ ]]; then
        echo -e "${COLOR[red]}Command \`$1\` not supported by this script.${COLOR[nc]}" >&2
        error skip $*
        exit 1
    fi
done

for CMD in ${DANGEROUS[@]}; do
    if [[ $1 == ${CMD} || $1 =~ ^${CMD}( )+ ]]; then
        confirm "\`${COLOR[yellow]}$1${COLOR[nc]}\` command is ${COLOR[red]}dangeours${COLOR[nc]} to remote site, confirm?"
        if [[ $? -eq 0 ]]; then
            break
        else
            error skip $*
            exit 1
        fi
    fi
done

if [[ $# -lt 1 ]]; then
    error please input commands to execute.
    exit 1
fi

host_list | while read HOST_CONF; do
    parse_ssh ${HOST_CONF}
    if [[ $? -ne 0 ]]; then
        warning "Invalid config in group ${GROUP_NAME}: $HOST_CONF"
        continue
    fi
    remote_exec $*
done
