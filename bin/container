#!/bin/bash

[[ -L $0 ]] && SCRIPT_FILE=`readlink -fn $0` || SCRIPT_FILE=$0
pushd `dirname "${SCRIPT_FILE}"` >/dev/null
BASE_DIR=`pwd`
popd >/dev/null

source "${BASE_DIR}/module.d/common.sh"
check_env || exit 1
FUNC_FILE_CONFIG="${MODULE_BASE}/config.sh"
FUNC_FILE_SENTRY="${MODULE_BASE}/sentry.sh"
FUNC_FILE_DOCKER="${MODULE_BASE}/docker.sh"
import_functions

# SCRIPT_START="${MODULE_BASE}/start-container.sh"
# SCRIPT_STOP="${MODULE_BASE}/stop-container.sh"
# SCRIPT_CHECK="${MODULE_BASE}/check-container.sh"

for SCRIPT in ${!SCRIPT_@}; do
    SCRIPT_FILE_PATH=$(eval echo \$$SCRIPT)
    if [[ ! -f "${SCRIPT_FILE_PATH}" ]]; then
        error script file not exist.
        exit 1
    fi
done

HELP_COMMANDS["start"]="Start an container by name."
HELP_COMMANDS["stop"]="Stop an container by name."
HELP_COMMANDS["status"]="Check container status by name."
HELP_COMMANDS["restart"]="Restart an container by name."
HELP_COMMANDS["logs"]="Get container's logs by name."
HELP_COMMANDS["shell"]="Get an container's shell by name."
HELP_COMMANDS["exec"]="Execute command in an container by name."
HELP_COMMANDS["list"]="List all running containers."

function shell() {
    while getopts :s: FLAG; do
        case $FLAG in
            s)
                SHELL=${OPTARG}
            ;;
            *)
                error Invalid shell args: $*
                exit 1
            ;;
        esac
    done
    shift $((OPTIND-1))

    docker exec -it $1 ${SHELL:=sh}
}

while getopts :h FLAG; do
    case $FLAG in
        h)
            help_message >&2
            exit
        ;;
        *)
            help_message >&2
            exit 1
        ;;
    esac
done
shift $((OPTIND - 1))

ACTION=$1
shift

case $ACTION in
    status)
        # source "${SCRIPT_CHECK}" $*
        for CONTAINER in $*; do
            check_container ${CONTAINER}
        done
        # [[ $? -ne 0 ]] && exit 1
    ;;
    start)
        # source "${SCRIPT_START}" $*
        for CONTAINER in $*; do
            start_container ${CONTAINER}
        done
        # [[ $? -ne 0 ]] && exit 1
    ;;
    stop)
        # source "${SCRIPT_STOP}" $*
        for CONTAINER in $*; do
            stop_container ${CONTAINER}
        done
        # [[ $? -ne 0 ]] && exit 1
    ;;
    restart)
        # source "${SCRIPT_STOP}" $*
        for CONTAINER in $*; do
            stop_container ${CONTAINER}
            [[ $? -ne 0 ]] && continue
            
            shift $(($#-1))

            # source "${SCRIPT_START}" $*
            start_container ${CONTAINER}
        done
        # [[ $? -ne 0 ]] && exit 1
    ;;
    logs)
        docker logs $*
    ;;
    list)
        docker ps $*
    ;;
    shell)
        shell $*
    ;;
    exec)
        docker exec $*
    ;;
    *)
    ;;
esac
