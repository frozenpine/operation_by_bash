#!/bin/bash

[[ -L $0 ]] && SCRIPT_FILE=`readlink -fn $0` || SCRIPT_FILE=$0
pushd `dirname "${SCRIPT_FILE}"` >/dev/null
BASE_DIR=`pwd`
popd >/dev/null

source "${BASE_DIR}/module.d/common.sh" || exit 1

FUNC_FILE_CONFIG="${MODULE_BASE}/config.sh"
import_functions

NGINX_GROUP=front

HELP_ARGS["g:group_name"]="optional,Group name for nginx cluster controlling."
HELP_ARGS["r"]="optional,Reload tag, if specified, all memeber in nginx cluster will be reloaded."

HELP_COMMANDS["data"]="Publish data files to all member in nginx cluster."
HELP_COMMANDS["conf"]="Publish config files to all member in nginx cluster."

function _pub() {
    if [[ $# -ne 1 ]]; then
        error "invalid pub arg: $*"
        exit 1
    fi

    info "pub $1 to nginx cluster."

    host_list | while read HOST_CONF;do
        parse_ssh ${HOST_CONF}
        if [[ $? -ne 0 ]]; then
            warning "Invalid config in group ${GROUP_NAME}: $HOST_CONF"
            continue
        fi

        rsync -a --compress --human-readable --progress --delete /opt/nginx/$1 ${SSH_HOST}:/opt/nginx/
    done
}

function _reload_nginx() {
    info "reload nginx cluster."
    allssh -g${NGINX_GROUP} container exec nginx nginx -s reload
}

while getopts :g:rh FLAG; do
    case $FLAG in
        g)
            NGINX_GROUP=${OPTARG}
        ;;
        r)
            RELOAD=1
        ;;
        h)
            _help >&2
            exit
        ;;
        *)
            error "invalid args: $*"
            exit 1
        ;;
    esac
done
shift $((OPTIND-1))

if [[ $# -lt 1 ]]; then
    error "missing command."
    exit 1
fi

COMMAND=$1
shift

GROUP_NAME=${NGINX_GROUP}
case ${COMMAND} in
    data)
        _pub data
    ;;
    conf)
        _pub conf
    ;;
    *)
        error "invalid command: ${COMMAND}"
        exit 1
    ;;
esac

[[ ${RELOAD} -eq 1 ]] && _reload_nginx
