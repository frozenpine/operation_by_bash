#!/bin/bash

[[ -L $0 ]] && SCRIPT_FILE=`readlink -fn $0` || SCRIPT_FILE=$0
pushd `dirname "${SCRIPT_FILE}"` >/dev/null
BASE_DIR=`pwd`
popd >/dev/null

source "${BASE_DIR}/module.d/common.sh" || exit 1

FUNC_FILE_CONFIG="${MODULE_BASE}/config.sh"
import_functions

NGINX_GROUP=front

DRY_RUN=

SERVICE_LIST="digital order tradebase"

for SERVICE in ${SERVICE_LIST}; do
    source "${BASE_DIR}/service.d/${SERVICE}.sh" || {
        echo "service list file missing: ${SERVICE}.sh" >&2
        exit 1
    }
done

HELP_ARGS["g:group_name"]="optional,Group name for nginx cluster controlling."
HELP_ARGS["r"]="optional,Reload tag, if specified, all memeber in nginx cluster will be reloaded."
HELP_ARGS["D"]="optional,Dry run command and show command line in console instead of execution, for test use."

HELP_COMMANDS["data"]="Publish data files to all member in nginx cluster."
HELP_COMMANDS["conf"]="Publish config files to all member in nginx cluster."

RSYOPT=(-rlptzv --progress --delete)

if [[ -n "${IDENTITY_FILE}" ]]; then
    RSYOPT=(${RSYOPT[@]} "--rsh='ssh -i ${IDENTITY_FILE}'")
fi

if [[ -n ${SUDO} ]]; then
    RSYOPT=(${RSYOPT[@]} "--rsync-path='sudo rsync'")
fi

function _pub_conf() {
    info "pub config to nginx-conf cluster."

    CONF_TEMP=`mktemp --suffix nginx --directory`
    mkdir -p "${CONF_TEMP}/conf.d"
    cp ${TEMPLATE_BASE}/nginx/*.conf "${CONF_TEMP}/"

    pushd "${TEMPLATE_BASE}/nginx/conf.d" >/dev/null

    for TEMPLATE_FILE in `ls *.template`; do
        eval "cat<<EOF
$(<"${TEMPLATE_FILE}")
EOF
" > "${CONF_TEMP}/conf.d/${TEMPLATE_FILE%%.template}"
    done

    popd >/dev/null

    host_list | while read HOST_CONF;do
        parse_ssh ${HOST_CONF}
        if [[ $? -ne 0 ]]; then
            warning "Invalid config in group ${GROUP_NAME}: $HOST_CONF"
            continue
        fi

        eval ${DRY_RUN} rsync "${RSYOPT[@]}" "${CONF_TEMP}" ${SSH_USER}@${SSH_HOST}:${DATA_BASE:=/opt}/nginx/conf/
    done
}

function _reload_nginx() {
    info "reload nginx cluster."\
    allssh -g${NGINX_GROUP} container exec nginx nginx -s reload
}

while getopts :g:Drh FLAG; do
    case $FLAG in
        D)
            DRY_RUN="echo"
        ;;
        g)
            NGINX_GROUP=${OPTARG}
        ;;
        r)
            RELOAD=1
        ;;
        h)
            _help >&2
            exit
        ;;
        *)
            error "invalid args: $*"
            exit 1
        ;;
    esac
done
shift $((OPTIND-1))

if [[ $# -lt 1 ]]; then
    error "missing command."
    exit 1
fi

COMMAND=$1
shift

GROUP_NAME=${NGINX_GROUP}
case ${COMMAND} in
    data)
        warning "not implemented."
        exit 1
    ;;
    conf)
        _pub_conf
    ;;
    *)
        error "invalid command: ${COMMAND}"
        exit 1
    ;;
esac

[[ ${RELOAD} -eq 1 ]] && _reload_nginx
