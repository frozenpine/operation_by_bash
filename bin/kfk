#!/bin/bash

[[ -L $0 ]] && SCRIPT_FILE=`readlink -fn $0` || SCRIPT_FILE=$0
pushd `dirname "${SCRIPT_FILE}"` >/dev/null
BASE_DIR=`pwd`
popd >/dev/null

source "${BASE_DIR}/module.d/common.sh" || exit 1
FUNC_FILE_CONFIG="${MODULE_BASE}/config.sh"
import_functions

KAFKA_HOME="${APP_BASE:=/opt}/kafka_2.12-2.1.0"
TOPIC_SCRIPT="${KAFKA_HOME}/bin/kafka-topics.sh"
GROUP_SCRIPT="${KAFKA_HOME}/bin/kafka-consumer-groups.sh"
CONSUMER_SCRIPT="${KAFKA_HOME}/bin/kafka-console-consumer.sh"
TOPIC_LIST_FILE="${CONF_BASE}/topic.list"

KEY_DESERIALIZER="--key-deserializer org.apache.kafka.common.serialization.StringDeserializer"
VALUE_DESERIALIZER="--value-deserializer com.quantdo.trade.kafka.kryo.KryoDeserializer"
# VALUE_DESERIALIZER=

DRY_RUN=

HELP_ARGS["D"]="optional,Dry run command for test."

HELP_COMMANDS["start"]="Start an Kafka cluster/standalone."
HELP_COMMANDS["stop"]="Stop an Kafka cluster/standalone."
HELP_COMMANDS["restart"]="Restart an Kafka cluster/standalone."
HELP_COMMANDS["kill"]="Stop an Kafka cluster/standalone forcely."
HELP_COMMANDS["destory"]="Stop an Kafka cluster/standalone forcely & delete data files."
HELP_COMMANDS["status"]="Check Kafka cluster/standalone status."
HELP_COMMANDS["check"]="Check Kafka cluster/standalone status & data file exists."
HELP_COMMANDS["init"]="Create topics specified in topic.list"
HELP_COMMANDS["create"]="Combine start & init command."
HELP_COMMANDS["delete"]="Delete all topics in Kafka cluster/standalone."
HELP_COMMANDS["pub"]="Publish kafka.sh module in container.d to all memeber hosts."
HELP_COMMANDS["logs"]="Get all kafka's last 100 logs"
HELP_COMMANDS["topic"]="Wrapper for kafka-topic.sh without specify zookeeper address."
HELP_COMMANDS["group"]="Wrapper for kafak-groups.sh without specify kafka bootstraps."
HELP_COMMANDS["consumer"]="Wrapper for consule-consumer.sh without specify kafka bootstraps."

SERVICE_LIST="zookeeper kafka"

for SERVICE in ${SERVICE_LIST}; do
    source "${BASE_DIR}/service.d/${SERVICE}.sh" || {
        echo "service list file missing: ${SERVICE}.sh" >&2
        exit 1
    }
done

ZK_SERVERS=
for SVR_NAME in ${!ZK_LIST[@]}; do
    ZK_SERVERS="${ZK_SERVERS},${SVR_NAME}:${ZK_PORT}"
done
ZK_SERVERS=${ZK_SERVERS:1}

KAFKA_SERVERS=
for SVR_NAME in ${!KAFKA_LIST[@]}; do
    KAFKA_SERVERS="${KAFKA_SERVERS},${SVR_NAME}:${KAFKA_PORT}"
done
KAFKA_SERVERS=${KAFKA_SERVERS:1}

function _topic() {
    eval "${DRY_RUN} ${TOPIC_SCRIPT} --zookeeper ${ZK_SERVERS} $*" 2> >(grep -v "SLF4J: " >&2)
}

function _group() {
    eval "${DRY_RUN} ${GROUP_SCRIPT} --bootstrap-server ${KAFKA_SERVERS} $*" 2> >(grep -v "SLF4J: " >&2)
}

function _consumer() {
    eval "${DRY_RUN} ${CONSUMER_SCRIPT} \
            --bootstrap-server ${KAFKA_SERVERS} \
            ${KEY_DESERIALIZER} \
            ${VALUE_DESERIALIZER} \
            $*"  2> >(grep -v "SLF4J: " >&2)
}

function _init() {
    local _TOPICS
    local _INIT_TOPICS
    local _DEFAULT_PARTITIONS
    local _DEFAULT_REPLICAS

    declare -A _PARTITION_MAP
    declare -A _REPLICA_MAP

    while getopts :p:r: FLAG; do
        case ${FLAG} in
            p)
                _DEFAULT_PARTITIONS=${OPTARG}
            ;;
            r)
                _DEFAULT_REPLICAS=${OPTARG}
            ;;
            *)
                error "invalid init args: $*"
                exit 1
            ;;
        esac
    done
    shift $((OPTIND-1))

    if [[ ! -f "${TOPIC_LIST_FILE}" ]]; then
        error "no topic list specified by args or topic file."
        exit 1
    fi

    info "reading kafka topics from file."
    while read LINE; do
        LINE=`echo ${LINE} | sed 's/#.*//g; /^[ '"\t"']*$/d'`

        if [[ -z ${LINE} ]]; then
            continue
        fi

        if [[ ${LINE} =~ ([^ ]+)[\ \t]*([0-9]*|null)[\ \t]*([0-9]*) ]]; then
            TOPIC=${BASH_REMATCH[1]}
            PARTITION=${BASH_REMATCH[2]}
            REPLICA=${BASH_REMATCH[3]}

            _TOPICS="${_TOPICS} ${TOPIC}"
            
            if [[ -n ${PARTITION} && ${PARTITION} != "null" ]]; then
                _PARTITION_MAP[${TOPIC}]=${PARTITION}
            fi
            
            if [[ -n ${REPLICA} ]]; then
                _REPLICA_MAP[${TOPIC}]=${REPLICA}
            fi
        else
            warning "invalid topic config: ${LINE}"
            continue
        fi
    done<"${TOPIC_LIST_FILE}"

    if [[ $# -gt 0 ]]; then
        for TOPIC in $*; do
            if [[ ! ${_TOPICS} =~ ${TOPIC} ]]; then
                error "invald topic[${TOPIC}] in args: $*"
                exit 1
            fi
        done

        _INIT_TOPICS="$*"
    else
        _INIT_TOPICS="${_TOPICS}"
    fi

    info "initiating kafka topics: ${_INIT_TOPICS}"

    for TOPIC in ${_INIT_TOPICS}; do
        info "creating topic: ${TOPIC}"
        
        if [[ -n ${_PARTITION_MAP[${TOPIC}]} ]]; then
            PARTITIONS=${_PARTITION_MAP[${TOPIC}]}
        else
            PARTITIONS=${_DEFAULT_PARTITIONS:=3}
        fi

        if [[ -n ${_REPLICA_MAP[${TOPIC}]} ]]; then
            REPLICAS=${_REPLICA_MAP[${TOPIC}]}
        else
            REPLICAS=${_DEFAULT_REPLICAS:=3}
        fi
        
        if [[ ${REPLICAS} -gt ${#KAFKA_LIST[@]} ]]; then
            REPLICAS=${#KAFKA_LIST[@]}
        fi
        
        _topic --create --topic ${TOPIC} --partitions ${PARTITIONS} --replication-factor ${REPLICAS}
        
        if [[ $? -eq 0 ]]; then
            info "topic[${TOPIC}] created."
            _topic --describe --topic ${TOPIC}
        else
            error "topic[${TOPIC}] creation failed."
        fi
    done
}

function _delete() {
    info "deleting kafka topics..."
    if [[ $1 == "all" ]]; then
        PATTERN="^__"
    else
        PATTERN="^__|CLEAR|ACCESS"
    fi
    _topic --list | grep -Ev "${PATTERN}" | while read TOPIC_NAME; do
        _topic --topic ${TOPIC_NAME} --delete
    done
    info "delete finished, checking topics..."
}

while getopts :hD FLAG; do
    case $FLAG in
        D)
            DRY_RUN="echo"
        ;;
        h)
            _help >&2
            exit
        ;;
        *)
            error "invalid args: $*"
        ;;
    esac
done
shift $((OPTIND-1))

if [[ $# -lt 1 ]]; then
    error "`basename ${SCRIPT_FILE}` command missing: $*"
    exit 1
fi

COMMAND=$1
shift

case ${COMMAND} in
    init)
        _init $*
    ;;
    start)
        allssh -gkafka container start kafka
    ;;
    create)
        allssh -gkafka container start kafka
        info "delay 3s for broker connections."
        sleep 3
        _init 
    ;;
    stop)
        allssh -gkafka container stop kafka
    ;;
    kill)
        allssh -gkafka container stop -f kafka
    ;;
    status)
        allssh -gkafka container status kafka
    ;;
    check)
        allssh -gkafka ls -l ${DATA_BASE:=/opt}
        allssh -gkafka container status kafka
    ;;
    delete)
        _delete $*
    ;;
    destory)
        _delete all
        sleep 1
        _topic --list
        info "checking finished."
        allssh -gkafka container stop -crf kafka
    ;;
    pub)
        allscp -gkafka "${CONTAINER_BASE}/kafka.sh"
    ;;
    logs)
        allssh -gkafka container logs --tail 100 kafka
    ;;
    topic)
        _topic $*
    ;;
    group)
        _group $*
    ;;
    consumer)
        _consumer $*
    ;;
    *)
        error "invalid command: ${COMMAND}"
        exit 1
    ;;
esac
