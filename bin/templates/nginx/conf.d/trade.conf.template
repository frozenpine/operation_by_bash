upstream order-front {
`
for SVR_NAME in ${!ORDER_LIST[@]}; do
    echo "    server ${ORDER_LIST[$SVR_NAME]}:${ORDER_PORT};"
done
`
}

upstream tradebase-front {
`
for SVR_NAME in ${!TRADEBASE_LIST[@]}; do
    echo "    server ${TRADEBASE_LIST[$SVR_NAME]}:${TRADEBASE_PORT};"
done
`
}

upstream query-front {
`
for SVR_NAME in ${!QUERY_LIST[@]}; do
    echo "    server ${QUERY_LIST[$SVR_NAME]}:${QUERY_PORT};"
done
`
}

upstream websocket-front {
`
for SVR_NAME in ${!WEBSOCKET_LIST[@]}; do
    echo "    server ${WEBSOCKET_LIST[$SVR_NAME]}:${WEBSOCKET_PORT};"
done
`
}

upstream kline-front {
`
for SVR_NAME in ${!KLINE_LIST[@]}; do
    echo "    server ${KLINE_LIST[$SVR_NAME]}:${KLINE_PORT};"
done
`
}

proxy_cache_path /var/lib/nginx/caches levels=1:2 keys_zone=kline_cache:20m max_size=20g inactive=3d use_temp_path=off;

log_format  proxy   '$remote_addr - $remote_user [$time_local] to $upstream_addr: "$request", '
                    'status: $status, body_bytes_send: $body_bytes_sent, '
                    'header: ("$http_referer" "$http_user_agent" "$http_x_forwarded_for"), '
                    'upstream_response_time: $upstream_response_time';

server {
    listen      80;
    server_name trade localhost;

    proxy_read_timeout 600;
    proxy_send_timeout 300;

    location / {
        root   /var/lib/nginx/quant-coin;
        index  index.html index.htm;

        # 用于配合 browserHistory使用
        try_files \$uri \$uri/ /index.html;

        # 如果有资源，建议使用 https + http2，配合按需加载可以获得更好的体验
        # rewrite ^/(.*)$ https://preview.pro.ant.design/$1 permanent;
    }

    location = /version {
        default_type application/json;

        root   /var/lib/nginx/quant-coin;

        auth_basic "Restricted";
        auth_basic_user_file /var/lib/nginx/loginuser;
    }

    location ~ ^/(config|symbol) {
        access_log  /var/log/nginx/trade.access.log  proxy;

        proxy_http_version 1.1;

        proxy_pass http://kline-front;

        proxy_set_header HOST \$HOST;
        proxy_set_header X-REAL-IP \$remote_addr;
        proxy_set_header X-Forwarded-SERVER \$HOST;
        proxy_set_header Request-Url \$request_uri;
    }

    location ^~ /history {
        access_log  /var/log/nginx/trade.access.log  proxy;

        set_by_lua \$args '
            local from = tonumber(ngx.var.arg_from)
            local to = tonumber(ngx.var.arg_to)
            local symbol = ngx.var.arg_symbol
            local resolution = ngx.var.arg_resolution

            f1, f2 = math.modf(from / 60)
            t1, t2 = math.modf(to / 10)
            return string.format("symbol=%s&resolution=%s&from=%d&to=%d", symbol, resolution, f1 * 60, t1 * 10)
        ';

        proxy_cache kline_cache;
        proxy_cache_revalidate on;
        proxy_cache_min_uses 1;
        proxy_cache_use_stale error timeout updating http_500 http_502
                              http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;

        proxy_http_version 1.1;

        proxy_pass http://kline-front;

        proxy_next_upstream error | timeout | http_500 | http_502 | http_502 | http_503;

        proxy_set_header HOST \$HOST;
        proxy_set_header X-REAL-IP \$remote_addr;
        proxy_set_header X-Forwarded-SERVER \$HOST;
        proxy_set_header Request-Url \$request_uri;
    }

    location ^~ /api/v1/user {
        access_log  /var/log/nginx/trade.access.log  proxy;

        proxy_http_version 1.1;

        proxy_pass http://tradebase-front;

        proxy_set_header HOST \$HOST;
        proxy_set_header X-REAL-IP \$remote_addr;
        proxy_set_header X-Forwarded-SERVER \$HOST;
        proxy_set_header Request-Url \$request_uri;

        proxy_pass_header api-key;
        proxy_pass_header api-expires;
        proxy_pass_header api-signature;

        if ( \$request_method = 'OPTIONS' ) { 
            add_header Access-Control-Allow-Origin \$http_origin; 
            add_header Access-Control-Allow-Headers Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Data-Type,X-Requested-With; 
            add_header Access-Control-Allow-Methods GET,POST,OPTIONS,HEAD,PUT; 
            add_header Access-Control-Allow-Credentials true; 
            add_header Access-Control-Allow-Headers X-Data-Type,X-Auth-Token;
        }
    }

    location ^~ /api/v1/apiKey {
        access_log  /var/log/nginx/trade.access.log  proxy;

        add_header Access-Control-Allow-Headers X-Requested-With;
        add_header Access-Control-Allow-Methods GET,POST,OPTIONS;
        if ( \$request_method = 'OPTIONS' ) {
            add_header Access-Control-Allow-Origin \$http_origin;
            add_header Access-Control-Allow-Headers Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Data-Type,X-Requested-With;
            add_header Access-Control-Allow-Methods GET,POST,OPTIONS,HEAD,PUT;
            add_header Access-Control-Allow-Credentials true;
            add_header Access-Control-Allow-Headers X-Data-Type,X-Auth-Token;
            return 204;
        }

        proxy_http_version 1.1;

        proxy_pass http://tradebase-front;

        proxy_set_header HOST \$HOST;
        proxy_set_header X-REAL-IP \$remote_addr;
        proxy_set_header X-Forwarded-SERVER \$HOST;
        proxy_set_header Request-Url \$request_uri;

        proxy_pass_header api-key;
        proxy_pass_header api-expires;
        proxy_pass_header api-signature;
    }

    location = /realtime {
        proxy_pass http://websocket-front;
        proxy_read_timeout 300s;

        proxy_set_header HOST \$HOST;
        proxy_set_header X-REAL-IP \$remote_addr;
        proxy_set_header X-Forwarded-SERVER \$HOST;
        proxy_set_header Request-Url \$request_uri;

        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_pass_header api-key;
        proxy_pass_header api-expires;
        proxy_pass_header api-signature;
        proxy_pass_header CLIENT-ID;
        proxy_pass_header ACCOUNT-ID;
    }
    
    location ~ /api/v1/(accountx|positionx|instrumentx|signature|client|orderx)(/sys)? {
        access_log  /var/log/nginx/trade.access.log  proxy;

        proxy_http_version 1.1;

        proxy_pass http://order-front/\$1\$2\$is_args\$args;

        proxy_set_header HOST \$HOST;
        proxy_set_header X-REAL-IP \$remote_addr;
        proxy_set_header X-Forwarded-SERVER \$HOST;
        proxy_set_header Request-Url \$request_uri;

        proxy_pass_header api-key;
        proxy_pass_header api-expires;
        proxy_pass_header api-signature;
        proxy_pass_header CLIENT-ID;
        proxy_pass_header ACCOUNT-ID;
    }

    location ^~ /api/v1/user/margin {
        access_log  /var/log/nginx/trade.access.log  proxy;

        if (\$http_api_key = '') {
            return 401 'no api-key header found.';
        } 
        if (\$http_api_expires = '') {
            return 401 'no api-expires header found.';
        }
        if (\$http_api_signature = '') {
            return 401 'no api-signature header found.';
        }

        proxy_http_version 1.1;
        
        proxy_pass http://order-front/user/margin;

        proxy_set_header HOST \$HOST;
        proxy_set_header X-REAL-IP \$remote_addr;
        proxy_set_header X-Forwarded-SERVER \$HOST;
        proxy_set_header Request-Url \$request_uri;

        proxy_pass_header api-key;
        proxy_pass_header api-expires;
        proxy_pass_header api-signature;
    }

    location ^~ /api/v1/order/all {
        access_log  /var/log/nginx/trade.access.log  proxy;

        if (\$http_api_key = '') {
            return 401 'no api-key header found.';
        } 
        if (\$http_api_expires = '') {
            return 401 'no api-expires header found.';
        }
        if (\$http_api_signature = '') {
            return 401 'no api-signature header found.';
        }

        proxy_http_version 1.1;
        
        proxy_pass http://order-front/order/all;

        proxy_set_header HOST \$HOST;
        proxy_set_header X-REAL-IP \$remote_addr;
        proxy_set_header X-Forwarded-SERVER \$HOST;
        proxy_set_header Request-Url \$request_uri;

        proxy_pass_header api-key;
        proxy_pass_header api-expires;
        proxy_pass_header api-signature;
    }

    location ^~ /api/v1/orderx/sys {
        access_log  /var/log/nginx/trade.access.log  proxy;

        proxy_http_version 1.1;
        
        proxy_pass http://order-front/orderx/sys;

        proxy_set_header HOST \$HOST;
        proxy_set_header X-REAL-IP \$remote_addr;
        proxy_set_header X-Forwarded-SERVER \$HOST;
        proxy_set_header Request-Url \$request_uri;

        proxy_pass_header api-key;
        proxy_pass_header api-expires;
        proxy_pass_header api-signature;
        proxy_pass_header CLIENT-ID;
        proxy_pass_header ACCOUNT-ID;
    }

    location ^~ /api/v1/order {
        access_log  /var/log/nginx/trade.access.log  proxy;

        if (\$http_api_key = '') {
            return 401 'no api-key header found.';
        } 
        if (\$http_api_expires = '') {
            return 401 'no api-expires header found.';
        }
        if (\$http_api_signature = '') {
            return 401 'no api-signature header found.';
        }
        
        set \$BACK_END http://order-front;
        if (\$request_method = 'GET') {
            set \$BACK_END http://query-front;
        }

        proxy_http_version 1.1;
        
        proxy_pass \$BACK_END/order\$is_args\$args;

        proxy_set_header HOST \$HOST;
        proxy_set_header X-REAL-IP \$remote_addr;
        proxy_set_header X-Forwarded-SERVER \$HOST;
        proxy_set_header Request-Url \$request_uri;

        proxy_pass_header api-key;
        proxy_pass_header api-expires;
        proxy_pass_header api-signature;
    }

    location ~ /api/v1/position/(leverage|riskLimit|isolate|transferMargin) {
        access_log  /var/log/nginx/trade.access.log  proxy;

        proxy_http_version 1.1;
        
        proxy_pass http://order-front/position/\$1;

        proxy_set_header HOST \$HOST;
        proxy_set_header X-REAL-IP \$remote_addr;
        proxy_set_header X-Forwarded-SERVER \$HOST;
        proxy_set_header Request-Url \$request_uri;

        proxy_pass_header api-key;
        proxy_pass_header api-expires;
        proxy_pass_header api-signature;
    }

    location ~ /api/v1/(.*) {
        access_log  /var/log/nginx/trade.access.log  proxy;

        proxy_http_version 1.1;
        
        proxy_pass http://query-front/\$1\$is_args\$args;

        proxy_set_header HOST \$HOST;
        proxy_set_header X-REAL-IP \$remote_addr;
        proxy_set_header X-Forwarded-SERVER \$HOST;
        proxy_set_header Request-Url \$request_uri;

        proxy_pass_header api-key;
        proxy_pass_header api-expires;
        proxy_pass_header api-signature;
    }
}

