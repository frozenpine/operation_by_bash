#!/bin/bash

[[ -L $0 ]] && SCRIPT_FILE=`readlink -fn $0` || SCRIPT_FILE=$0
pushd `dirname "${SCRIPT_FILE}"` >/dev/null
BASE_DIR=`pwd`
popd >/dev/null

source "${BASE_DIR}/module.d/common.sh"
check_env || exit 1

FUNC_FILE_TEMPLATE="${MODULE_BASE}/template.sh"
import_functions

COMPILE_BASE="${DATA_BASE:=/opt}/build"
HTTP_PUBLISH_BASE="${DATA_BASE:=/opt}/publish"

declare -A JAVA_MODULE_DEFINE
JAVA_MODULE_DEFINE["digital"]="digital-rest digital-serviceimpl"
JAVA_MODULE_DEFINE["management"]="management-rest management-service"
JAVA_MODULE_DEFINE["trade-system"]="trade-clear trade-sink-db trade-sink-es trade-match trade-order trade-query trade-kline trade-back-order"
JAVA_MODULE_DEFINE["service-management"]="exchange-index-server scheduler-server sms-mail-server trade-base"

declare -A JAVA_MODULE_DEPLOY
JAVA_MODULE_DEPLOY["trade-system"]="trade-data-exchange trade-core"

declare -A PUB_MAPPER
PUB_MAPPER["management-rest"]=digital-rest
PUB_MAPPER["management-service"]=digital-serviceimpl
PUB_MAPPER["trade-sink-db"]=trade-tmdb
PUB_MAPPER["trade-sink-es"]=trade-tmes
PUB_MAPPER["trade-clear"]=trade-clear
PUB_MAPPER["trade-match"]=trade-match
PUB_MAPPER["trade-order"]=trade-order
PUB_MAPPER["trade-query"]=trade-query
PUB_MAPPER["trade-kline"]=trade-kline
PUB_MAPPER["trade-back-order"]=trade-backorder
PUB_MAPPER["exchange-index-server"]=service-index
PUB_MAPPER["scheduler-server"]=service-scheduler
PUB_MAPPER["sms-mail-server"]=service-sms
PUB_MAPPER["trade-base"]=service-tradebase
PUB_MAPPER["365MEX"]=quant-coin
PUB_MAPPER["webadmin-front"]=quant-coinMS

UPDATE_GIT=0
PUBLISH=
BRANCH=master
COMMIT_ID=
FORCE=0

HELP_ARGS["u"]="optional,Pull lastest update from master@github."
HELP_ARGS["p:"]="optional,Publish new build to remote server, http download or docker registry."
HELP_ARGS["f"]="optional,Compile project forcelly, without check pre-build."
HELP_ARGS["C:npm|mvn"]="optional,Specify compiler type for project, and ignore all others."
HELP_ARGS["e:test|prod"]="optional,Specify running envirionment manually, if auto detection failed."
HELP_ARGS["b:{branch_name}"]="optional,Specify local branch name, default(master)."
HELP_ARGS["c:{commit_id}"]="optional,Sepcify commit id to checkout, this action has higher priority than \"-u\" option."

HELP_POSITION_ARGS[0]="{all | project_name}..."

ENVIRONMENT=

# TODO: 拆分各 compile 函数及 git 函数为 module.d 下的模块文件

function _check_compiler() {
    if [[ $# -lt 1 ]]; then
        error "compiler name missing."
        exit 1
    fi

    local _compiler=$1

    which ${_compiler} &>/dev/null
    if [[ $? -ne 0 ]]; then
        error "\`${_compiler}\` command missing, stop compiling."
        exit 1
    fi

    if [[ ${_compiler} == "gcc" ]]; then
        for _extra_complier in g++ cmake make; do
            which ${_extra_complier} &>/dev/null || {
                error "\`${_extra_complier}\` missing, stop compiling."
                exit 1
            }
        done
    fi
}

function _decide_compiler() {
    ls npm* &>/dev/null && {
        echo -n npm
        return
    }

    ls yarn.lock &>/dev/null && {
        echo -n npm
        return
    }

    ls package*.json &>/dev/null && {
        echo -n npm
        return
    }

    ls pom.xml &>/dev/null && {
        echo -n mvn
        return
    }

    ls */pom.xml &>/dev/null && {
        echo -n mvn
        return
    }

    ls */CMakeLists.txt &>/dev/null && {
        echo -n gcc
        return
    }

    return 1
}

function _get_commit() {
    local _commit=`git show | grep commit | awk '{print $NF}'`
    COMMIT_ID=${_commit:0:7}
}

function _git_update() {
    # drop all local changes.
    git checkout .

    local _CURRENT_BRANCH=`git branch | grep "*" | cut -d' ' -f2`
    if [[ ${_CURRENT_BRANCH} != ${BRANCH} ]]; then
        warning "current branch is not ${BRANCH}, checkout to ${BRANCH}."
        git checkout ${BRANCH}

        if [[ $? -ne 0 ]]; then
            error "check out to ${BRANCH} failed."
            exit 1
        fi
    fi

    if [[ x"${COMMIT_ID}" != "x" ]]; then
        git checkout ${COMMIT_ID}
        
        if [[ $? -ne 0 ]]; then
            error "checkout commit[${COMMIT_ID}] failed."
            exit 1
        fi

        return
    fi

    if [[ ${UPDATE_GIT} -ne 1 ]]; then
        _get_commit
        return
    fi

    info "getting ${_project_base_name} latest version from git."

    git pull && _get_commit
}

function _git_patch() {
    if [[ $# -lt 1 ]]; then
        error "project name missing in git patch."
        exit 1
    fi

    local _project_name=$1
    local _patch_file="${PATCH_BASE}/${_project_name}/patch.diff"
    
    if [[ ! -f "${_patch_file}" ]]; then
        info "no patch file found for project[${_project_name}]"
        return
    fi

    git apply --check "${_patch_file}" && git apply "${_patch_file}"
    if [[ $? -ne 0 ]]; then
        error "patch[${_patch_file}] failed for project[${_project_name}]."
        exit 1
    fi

    info "${_patch_file} applied successfully."
}

function _npm_compile() {
    local _project_base_dir=`pwd`
    local _project_base_name

    pushd "${_project_base_dir}" >/dev/null
        _project_base_name=$(basename `pwd`)

        _git_update

        if [[ x"${COMMIT_ID}" == "x" ]]; then
            error "fail to get current commit id."
            exit 1
        fi

        info "start to build project: ${_project_base_name}[${COMMIT_ID}]"

        _git_patch ${_project_base_name}

        local _tar_file="${_project_base_name}_${COMMIT_ID}.tar.gz"

        if [[ -f "build/${_tar_file}" && ${FORCE} -ne 1 ]]; then
            info "project ${_project_base_name}[${COMMIT_ID}]'s build aleady exist, skip building."
            return
        fi

        npm install && {
            info "try to build product version first."
            npm run buildProd || {
                warning "product version build failed, build normal."
                npm run build
            }
        }
        
        if [[ $? -ne 0 ]]; then
            error "project[${_project_base_name}] build failed."
            exit 1
        fi

        cd build && tar -czvf "${_tar_file}" . --exclude "*.tar.gz" &>/dev/null
        ls -l --color=auto "${_tar_file}"

        if [[ x"${PUBLISH}" == "x" ]]; then
            info "build finished & no publish destination specified, exit."
            return
        fi

        if [[ x"${PUB_MAPPER[$_project_base_name]}" == "x" ]]; then
            error "no publish mapper for ${_project_base_name}"
            exit 1
        fi

        if [[ ${PUBLISH} =~ http|all ]]; then
            local _http_pub_dir="${HTTP_PUBLISH_BASE}/${_project_base_name}/${BRANCH}-`date '+%Y%m%d%H%M%S'`"

            info "publishing ${_project_base_name}[${COMMIT_ID}] to ${_http_pub_dir}"

            ${SUDO} mkdir -p "${_http_pub_dir}"
            ${SUDO} cp "${_tar_file}" "${_http_pub_dir}/"
        fi

        if [[ ${PUBLISH} =~ remote|all ]]; then
            local _nginx_data_base="${DATA_BASE:=/opt}/nginx/data"
            local _project_pub_dir="${_nginx_data_base}/${PUB_MAPPER[$_project_base_name]}"

            info "publishing ${_project_base_name}[${COMMIT_ID}] to ${_project_pub_dir}"

            if [[ ! -d "${_project_pub_dir}" ]]; then
                mkdir -p "${_project_pub_dir}"
            fi
            
            # aleady cd build on tar build files
            ${SUDO} tar -xzvf "${_tar_file}" -C "${_project_pub_dir}"
            if [[ $? -ne 0 ]]; then
                error "publishing ${_project_base_name}[${COMMIT_ID}] failed."
                exit 1
            fi

            echo -n "{\"version\": \"${COMMIT_ID}\"}" > "${_project_pub_dir}/version"

            nginx-pub data ${PUB_MAPPER[$_project_base_name]}
        fi
    popd &>/dev/null
}

function _mvn_compile() {
    local _project_base_dir=`find . -maxdepth 2 -type f -name pom.xml -exec dirname {} \; | sort | head -1`
    local _project_base_name
    local _env_arg

    # netstat -tnl | grep :${MAVEN_MIRROR_PORT} | grep LISTEN &>/dev/null
    # if [[ $? -ne 0 ]]; then
    #     warning "maven mirror port for js local repository not open."
    #     confirm -t 10 || exit 1
    # fi
    
    pushd "${_project_base_dir}" >/dev/null
        _project_base_name=$(basename `pwd`)

        if [[ x"${JAVA_MODULE_DEFINE[$_project_base_name]}" == "x" ]]; then
            cat<<EOF | error
not supported project: ${_project_base_name} `pwd`
please upgrade this \`compile\` command to support new project.

contact: journeyblue@163.com or sonny.frozenpine@gmail.com
git repo: https://github.com/frozenpine/operation_by_bash
EOF
            exit 1
        fi
        
        _git_update

        if [[ x"${COMMIT_ID}" == "x" ]]; then
            error "fail to get current commit id."
            exit 1
        fi

        info "start to build project: ${_project_base_name}[${COMMIT_ID}]"

        _git_patch ${_project_base_name}

        if [[ -d conf ]]; then
            _env_arg="-Denv=dev"
        fi

        for module in ${JAVA_MODULE_DEFINE[$_project_base_name]}; do
            local _pom_file="${module}/pom.xml"
            
            if [[ ! -f "${_pom_file}" ]]; then
                error "pom.xml missing in ${_project_base_dir} ${module}"
                exit 1
            fi

            grep "<groupId>io.sentry</groupId>" "${_pom_file}" &>/dev/null
            if [[ $? -ne 0 ]]; then
                ${SUDO} sed -i '/<dependencies>/ a \        <dependency>\n            <groupId>io.sentry</groupId>\n            <artifactId>sentry-log4j2</artifactId>\n            <version>1.7.16</version>\n        </dependency>' "${_pom_file}"
            fi

            LOG_FILE_NAME=${module}
            template "${TEMPLATE_BASE}/log4j2/log4j2.xml.template" "${module}/src/main/resources/log4j2.xml"

            find ${module}/src/main/resources -type f -name "*.properties" | while read FILE; do
                ${SUDO} sed -i '/spring.redis.password/ d; /jedis.pool.password/ d; /redis.password/ d;' ${FILE}

                ${SUDO} sed -i 's/cache.type.*$/cache.type = 1/' ${FILE}
            done
        done

        export COMMIT_ID
        export BRANCH
        mvn clean package -DskipTests=true ${_env_arg} -U

        if [[ $? -ne 0 ]]; then
            error "project[${_project_base_name}] build failed."
            exit 1
        fi

        if [[ x"${PUBLISH}" == "x" ]]; then
            info "build finished & no publish destination specified, exit."
            return
        fi

        local _project_version=`sed -n '/<version>.*<\/version>/ s/'"[[:space:]]"'*<version>\(.*\)<\/version>/\1/p;' pom.xml | head -1`

        if [[ ${PUBLISH} =~ http|all ]]; then
            local _http_pub_dir="${HTTP_PUBLISH_BASE}/${_project_base_name}/${BRANCH}-`date '+%Y%m%d%H%M%S'`-${COMMIT_ID}"
            ${SUDO} mkdir -p "${_http_pub_dir}"
        fi

        if [[ ${PUBLISH} =~ deploy|all ]]; then
            for module in ${JAVA_MODULE_DEPLOY[$_project_base_name]}; do
                info "deploy ${moduel} to maven repositry."
                pushd ${module} >/dev/null
                    # TODO: parse deploy args to tell snapshot or release
                    mvn deploy -DaltDeploymentRepository=js-snapshot::default::http://localhost:8081/repository/maven-snapshot/
                popd >/dev/null
            done
        fi
        
        for module in ${JAVA_MODULE_DEFINE[$_project_base_name]}; do
            if [[ x"${PUB_MAPPER[$module]}" == "x" ]]; then
                error "no publish mapper for ${_project_base_name}[${module}]"
                exit 1
            fi

            if [[ ${PUBLISH} =~ http|all ]]; then
                ${SUDO} tar -czvf "${_http_pub_dir}/${PUB_MAPPER[$module]}-${_project_version}.tar.gz" ${module}/target/*.jar ${module}/target/classes/application*
            fi

            if [[ ${PUBLISH} =~ docker|all ]]; then
                local _publish_name="${PUB_MAPPER[$module]}-${_project_version}.jar"
                local _docker_hub_base="${DATA_BASE:=/opt}/docker-hub"
                local _docker_hub_prj_name=`echo ${PUB_MAPPER[$module]} | cut -d'-' -f1`
                local _publish_file="${_docker_hub_base}/${_docker_hub_prj_name}/${_publish_name}"
                

                info "publishing ${_project_base_name} ${module}[${COMMIT_ID}] to ${_publish_file}"

                if [[ ! -d "${_docker_hub_base}/${_docker_hub_prj_name}" ]]; then
                    mkdir -p "${_docker_hub_base}/${_docker_hub_prj_name}"
                fi
                
                ${SUDO} cp -f ${module}/target/*.jar "${_publish_file}"
                
                if [[ $? -ne 0 ]]; then
                    error "publishing ${_project_base_name} ${module}[${COMMIT_ID}] failed."
                    exit 1
                fi
            fi
        done

        if [[ ${PUBLISH} =~ docker|all ]]; then
            build-image -cp -b${_docker_hub_prj_name} all
        fi
    popd >/dev/null
}

function _gcc_compile() {
    local _project_base_dir=`find . -maxdepth 2 -type f -name CMakeLists.txt -exec dirname {} \;`
    local _project_base_name

    local _library_dir

    pushd `find . -type f -name "*.so" -exec dirname {} \;` >/dev/null
        _library_dir=`pwd`
        source ./link &>/dev/null
        export LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH
    popd >/dev/null

    pushd "${_project_base_dir}" >/dev/null
        _project_base_name=$(basename `pwd`)

        _git_update

        if [[ x"${COMMIT_ID}" == "x" ]]; then
            error "fail to get current commit id."
            exit 1
        fi

        info "start to build project: ${_project_base_name}[${COMMIT_ID}]"

        _git_patch ${_project_base_name}

        if [[ ! -f "CMakeLists.txt" ]]; then
            cat <<EOF | error
CMakeLists.txt file missing.
`pwd`
`ls -l`
EOF
            exit 1
        fi
        ${SUDO} sed -i 's/.*\/openssl/\.\/openssl/' CMakeLists.txt

        make clean
        cmake .
        make

        if [[ $? -ne 0 ]]; then
            error "project[${_project_base_name}] build failed."
            exit 1
        fi

        if [[ x"${PUBLISH}" == "x" ]]; then
            info "build finished & no publish destination specified, exit."
            return
        fi

        local _publish_name=`find . -maxdepth 1 -executable -type f -exec basename {} \;`

        if [[ ${PUBLISH} =~ http|all ]]; then
            local _http_publish_dir="${HTTP_PUBLISH_BASE}/${_project_base_dir}/${BRANCH}-`date '+%Y%m%d%H%M%S'`-${COMMIT_ID}"

            info "publishing ${_project_base_name}[${COMMIT_ID}] to ${_http_publish_dir}"
            
            ${SUDO} mkdir -p "${_http_publish_dir}"

            ${SUDO} tar -czvf "${_http_publish_dir}/libs.tar.gz" ${_library_dir}/*

            ${SUDO} tar -czvf "${_http_publish_dir}/${_publish_name}.tar.gz" ${_publish_name}*
        fi

        if [[ ${PUBLISH} =~ remote|all ]]; then
            local _publish_base_dir="${DATA_BASE:=/opt}/${_project_base_dir}"
            local _publish_dir="${_publish_base_dir}/${_publish_name}"
            local _publish_file_name="${_publish_dir}/${_publish_name}"

            info "publishing ${_project_base_name} ${_publish_name}[${COMMIT_ID}] to ${_publish_file}"

            if [[ ! -d "${_publish_dir}" ]]; then
                mkdir -p "${_publish_dir}"
            fi

            if [[ ! -d "${_publish_base_dir}/libs" ]]; then
                mkdir -p "${_publish_base_dir}/libs"
            fi

            ${SUDO} cp -f ${_library_dir}/* "${_publish_base_dir}/libs/"
            if [[ $? -ne 0 ]]; then
                error "publishing ${_project_base_name} ${_publish_name} libraries failed."
                exit 1
            fi
        

            ${SUDO} cp -f "${_publish_name}" "${_publish_file_name}"
            if [[ $? -ne 0 ]]; then
                error "publishing ${_project_base_name} ${_publish_name}[${COMMIT_ID}] failed."
                exit 1
            fi

            market deploy
        fi
    popd >/dev/null
}

while getopts :b:c:C:e:p:ufh FLAG; do
    case $FLAG in
        u)
            UPDATE_GIT=1
        ;;
        p)
            PUBLISH=${OPTARG}
        ;;
        b)
            BRANCH=${OPTARG}
        ;;
        c)
            COMMIT_ID=${OPTARG}
        ;;
        C)
            WANTED_COMPILER=${OPTARG}
            if [[ ! ${WANTED_COMPILER} =~ npm|mvn ]]; then
                error "invalid compiler specified: ${WANTED_COMPILER}"
                exit 1
            fi
        ;;
        e)
            ENVIRONMENT=${OPTARG}
            if [[ ! ${ENVIRONMENT} =~ test|prod ]]; then
                error "invalid environment name: ${ENVIRONMENT}"
                exit 1
            fi
        ;;
        f)
            FORCE=1
        ;;
        h)
            help_message >&2
            list_dir "${COMPILE_BASE}" >&2
            exit
        ;;
        *)
            error "invalid args for compile: $*"
            exit 1
        ;;
    esac
done
shift $((OPTIND-1))

if [[ $# -lt 1 ]]; then
    error "project name misssing for compile."
    list_dir "${COMPILE_BASE}" >&2
    exit 1
fi

if [[ $* =~ all ]]; then
    PROJECTS=$(find "${COMPILE_BASE}" -maxdepth 1 -type d -not -name `basename "${COMPILE_BASE}"` -exec basename {} \; | xargs)
else
    PROJECTS="$*"
fi

for PRJ in ${PROJECTS}; do
    COMPILE_DIR="${COMPILE_BASE}/${PRJ}"
    
    if [[ ! -d "${COMPILE_DIR}" ]]; then
        error "invalid project name: ${PRJ}"
        exit 1
    fi

    pushd "${COMPILE_DIR}" &>/dev/null

        COMPILER=`_decide_compiler`

        if [[ x"${WANTED_COMPILER}" != "x" && ${COMPILER} != ${WANTED_COMPILER} ]]; then
            warning "project[${PRJ}] compiler not satisfied."
            continue
        fi

        _check_compiler ${COMPILER}

        eval _${COMPILER}_compile

    popd &>/dev/null

    COMMIT_ID=
done
