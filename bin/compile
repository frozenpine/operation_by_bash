#!/bin/bash

[[ -L $0 ]] && SCRIPT_FILE=`readlink -fn $0` || SCRIPT_FILE=$0
pushd `dirname "${SCRIPT_FILE}"` >/dev/null
BASE_DIR=`pwd`
popd >/dev/null

source "${BASE_DIR}/module.d/common.sh" || exit 1

FUNC_FILE_TEMPLATE="${MODULE_BASE}/template.sh"
import_functions

COMPILE_BASE="${DATA_BASE:=/opt}/build"

declare -A JAVA_MODULE_DEFINE
JAVA_MODULE_DEFINE["digital"]="digital-rest digital-serviceimpl"
JAVA_MODULE_DEFINE["trade-system"]="trade-clear-database trade-clear-memory trade-match trade-order trade-query"
JAVA_MODULE_DEFINE["service-management"]="exchange-index-server scheduler-server sms-mail-server trade-base"

MAVEN_MIRROR_PORT=8181
UPDATE_GIT=0
COMMIT_ID=

HELP_ARGS["u"]="optional,Pull lastest update from master@github."
HELP_ARGS["c:npm|mvn"]="optional,Specify compiler type for project, and ignore all others."

HELP_POSITION_ARGS[0]="{all | project_name}..."

function _check_compiler() {
    if [[ $# -lt 1 ]]; then
        error "compiler name missing."
        exit 1
    fi

    local _compiler=$1

    which ${_compiler} &>/dev/null
    if [[ $? -ne 0 ]]; then
        error "\`${_compiler}\` command missing, stop compiling."
        exit 1
    fi
}

function _decide_compiler() {
    ls npm* &>/dev/null && {
        echo -n npm
        return
    }

    ls yarn.lock &>/dev/null && {
        echo -n npm
        return
    }

    ls package*.json &>/dev/null && {
        echo -n npm
        return
    }

    ls pom.xml &>/dev/null && {
        echo -n mvn
        return
    }

    ls */pom.xml &>/dev/null && {
        echo -n mvn
        return
    }

    return 1
}

function _get_commit() {
    local _commit=`git show | grep commit | awk '{print $NF}'`
    COMMIT_ID=${_commit:0:7}
}

function _git_update() {
    git branch | grep master &>/dev/null
    if [[ $? -ne 0 ]]; then
        warning "current branch is not master, checkout to master."
        git checkout master

        if [[ $? -ne 0 ]]; then
            error "check out to master failed."
            exit 1
        fi
    fi

    git checkout .

    if [[ ${UPDATE_GIT} -ne 1 ]]; then
        _get_commit
        return
    fi

    git pull && _get_commit
}

function _npm_compile() {
    local _project_base_dir=`pwd`
    local _project_base_name

    pushd "${_project_base_dir}" >/dev/null
        _project_base_name=$(basename `pwd`)

        _git_update

        if [[ x"${COMMIT_ID}" == "x" ]]; then
            error "fail to get current commit id."
            exit 1
        fi

        info "start to build project: ${_project_base_name}[${COMMIT_ID}]"

        # to fix websocket connection address
        local _origin_file="src/routes/transaction/index.js"
        local _patch_file="${TEMPLATE_BASE}/365MEX/patch.diff"
        if [[ -f "${_origin_file}" && -f "${_patch_file}" ]]; then
            git apply --check "${_patch_file}" && git apply "${_patch_file}"
            if [[ $? -ne 0 ]]; then
                error "patch index.js for websocket address fix failed."
                exit 1
            fi
        fi

        npm install && npm run build
        
        if [[ $? -ne 0 ]]; then
            error "project[${_project_base_name}] build failed."
            exit 1
        fi

        local _tar_file="${_project_base_name}_`date '+%Y%m%d%H%M%S'`.tar.gz"
        cd build && tar -czvf "${_tar_file}" . --exclude "*.tar.gz" &>/dev/null
        ls -l --color=auto "${_tar_file}"
    popd &>/dev/null
}

function _mvn_compile() {
    local _project_base_dir=`find . -maxdepth 2 -type f -name pom.xml -exec dirname {} \; | sort | head -1`
    local _project_base_name
    local _env_arg

    netstat -tnl | grep :${MAVEN_MIRROR_PORT} | grep LISTEN &>/dev/null
    if [[ $? -ne 0 ]]; then
        warning "maven mirror port for js local repository not open."
        confirm -t 10 || exit 1
    fi
    
    pushd "${_project_base_dir}" >/dev/null
        _project_base_name=$(basename `pwd`)

        if [[ x"${JAVA_MODULE_DEFINE[$_project_base_name]}" == "x" ]]; then
            cat<<EOF | error
not supported project: ${_project_base_name} `pwd`
please upgrade this \`compile\` command to support new project.

contact: journeyblue@163.com or sonny.frozenpine@gmail.com
git repo: https://github.com/frozenpine/operation_by_bash
EOF
            exit 1
        fi
        
        _git_update

        if [[ x"${COMMIT_ID}" == "x" ]]; then
            error "fail to get current commit id."
            exit 1
        fi

        info "start to build project: ${_project_base_name}[${COMMIT_ID}]"


        if [[ -d conf ]]; then
            _env_arg="-Denv=dev"
        fi

        for module in ${JAVA_MODULE_DEFINE[$_project_base_name]}; do
            local _pom_file="${module}/pom.xml"
            
            if [[ ! -f "${_pom_file}" ]]; then
                error "pom.xml missing in ${_project_base_dir} ${module}"
                exit 1
            fi

            grep "<groupId>io.sentry</groupId>" "${_pom_file}" &>/dev/null
            if [[ $? -ne 0 ]]; then
                ${SUDO} sed -i '/<dependencies>/ a \        <dependency>\n            <groupId>io.sentry</groupId>\n            <artifactId>sentry-log4j2</artifactId>\n            <version>1.7.16</version>\n        </dependency>' "${_pom_file}"
            fi

            local _log4j2_ext
            local _log4j2_origin=`ls ${module}/src/main/resources/log4j2* 2>/dev/null`
            if [[ x"${_log4j2_origin}" != "x" ]]; then
                _log4j2_ext=`echo ${_log4j2_origin} | cut -d'.' -f2`
            else
                _log4j2_ext=xml
            fi
            local _log4j2_file="${module}/src/main/resources/log4j2.${_log4j2_ext}"

            case ${_log4j2_ext} in
                yml)
                    template "${TEMPLATE_BASE}/log4j2/log4j2.yml.template" "${_log4j2_file}"
                ;;
                xml)
                    template "${TEMPLATE_BASE}/log4j2/log4j2.yml.template" "${_log4j2_file}"
                ;;
                *)
                    error "invalid log4j2 config file found: ${_log4j2_origin}"
                    exit 1
                ;;
            esac

            if [[ "${_log4j2_origin}" != "${_log4j2_file}" ]]; then
                ${SUDO} rm -f "${_log4j2_origin}"
            fi
        done

        mvn clean package -DskipTests=true ${_env_arg} -U

        if [[ $? -ne 0 ]]; then
            error "project[${_project_base_name}] build failed."
            exit 1
        fi
    popd >/dev/null
}

while getopts :c:uh FLAG; do
    case $FLAG in
        u)
            UPDATE_GIT=1
        ;;
        c)
            WANTED_COMPILER=${OPTARG}
            if [[ ! ${WANTED_COMPILER} =~ npm|mvn ]]; then
                error "invalid compiler specified: ${WANTED_COMPILER}"
                exit 1
            fi
        ;;
        h)
            help_message >&2
            list_dir "${COMPILE_BASE}" >&2
            exit
        ;;
        *)
            error "invalid args for compile: $*"
            exit 1
        ;;
    esac
done
shift $((OPTIND-1))

if [[ $# -lt 1 ]]; then
    error "project name misssing for compile."
    list_dir "${COMPILE_BASE}" >&2
    exit 1
fi

if [[ $* =~ all ]]; then
    PROJECTS=$(find "${COMPILE_BASE}" -maxdepth 1 -type d -not -name `basename "${COMPILE_BASE}"` -exec basename {} \; | xargs)
else
    PROJECTS="$*"
fi

for PRJ in ${PROJECTS}; do
    COMPILE_DIR="${COMPILE_BASE}/${PRJ}"
    
    if [[ ! -d "${COMPILE_DIR}" ]]; then
        error "invalid project name: ${PRJ}"
        exit 1
    fi

    pushd "${COMPILE_DIR}" &>/dev/null

        COMPILER=`_decide_compiler`

        if [[ x"${WANTED_COMPILER}" != "x" && ${COMPILER} != ${WANTED_COMPILER} ]]; then
            warning "project[${PRJ}] compiler not satisfied."
            continue
        fi

        _check_compiler ${COMPILER}

        eval _${COMPILER}_compile

    popd &>/dev/null
done
