#!/bin/bash

[[ -L $0 ]] && SCRIPT_FILE=`readlink -fn $0` || SCRIPT_FILE=$0
pushd `dirname "${SCRIPT_FILE}"` >/dev/null
BASE_DIR=`pwd`
popd >/dev/null

source "${BASE_DIR}/module.d/common.sh" || exit 1
FUNC_FILE_CONFIG="${MODULE_BASE}/config.sh"
import_functions

SERVICE_LIST=""

for SERVICE in ${SERVICE_LIST}; do
    source "${BASE_DIR}/service.d/${SERVICE}.sh" || {
        echo "service list file missing: ${SERVICE}.sh" >&2
        exit 1
    }
done

MANAGE_HOST="http://management"

MANAGE_USER="admin"
MANAGE_PASS="123456"

TOKEN=
RESULT=

HELP_ARGS["H:host"]="optional,Specify host[:port] to connect to, if not sepcified, default host: manage will be used."
HELP_ARGS["u:admin_user"]="optional,Specify admin user to login, if not specified, default auth will be used."
HELP_ARGS["p:admin_pass"]="optional,Specify admin pass to login, if not specified, default auth will be used."
HELP_ARGS["D"]="optional,Dry run command for test."

HELP_COMMANDS["start"]="Start management cluster/standalone."
HELP_COMMANDS["stop"]="Stop management cluster/standalone."
HELP_COMMANDS["kill"]="Stop management cluster/standalone forcely."
HELP_COMMANDS["status"]="Check management cluster/standalone status."
HELP_COMMANDS["check"]="Alias command for status."
HELP_COMMANDS["destory"]="Stop management cluster/standalone forcely & remove data files."
HELP_COMMANDS["logs"]="Get management cluster/standalone last 100 logs."
HELP_COMMANDS["pub"]="Publish container module to all management members."
HELP_COMMANDS["truncate"]="Truncate all db tables used by management cluster/standalone."
HELP_COMMANDS["init"]="Init all db tables' data used by management cluster/standalone."
HELP_COMMANDS["instrument"]="Login & execute sync instrument RPC provided by manage cluster/standalone."
HELP_COMMANDS["instrument"]="Login & execute sync fee RPC provided by manage cluster/standalone."

function _login() {
    RESULT=$(curl -XPOST "${MANAGE_HOST}/sso/login" \
                -H'Content-Type: application/json' \
                -d"{\"userName\": \"${MANAGE_USER}\", \"password\": \"${MANAGE_PASS}\"}" 2>/dev/null)
    if [[ $? -ne 0 || `echo ${RESULT} | jq .code` -ne 0 ]]; then
        error "Management login faild."
        exit 1
    else
        info "Login successed: ${RESULT}"
        TOKEN=`echo ${RESULT} | jq .result`
    fi
}

function _request() {
    local _URI

    if [[ -z ${TOKEN} ]]; then
        error "TOKEN missing, please login firest."
        exit 1
    fi

    if [[ $# -lt 1 ]]; then
        error "missing params: $*"
        exit 1
    fi

    _URI=$1
    shift

    RESULT=$(curl -XPOST "${MANAGE_HOST}/${_URI#/}" \
                -H"Content-Type: application/json" \
                -H"Cookie: QuantDo-Token=${TOKEN}" \
                -d"$*" 2>/dev/null)
    if [[ $? -ne 0 || `echo ${RESULT} | jq .code` -ne 0 ]]; then
        error "Request[${_URI}] failed."
        error "${RESULT}"
        exit 1
    fi
}

function _sync_instrument() {
    local _RESULT

    info "Finding unsynced instruments..."
    _request '/digital/instrument/findAll' '{}'
    echo "${RESULT}" | jq -c '.result | .[] | select(.instrumentStatus == "0")'
    
    if [[ `echo "${RESULT}" | jq -c '.result | .[] | select(.instrumentStatus == "0") | length'` -lt 1 ]]; then
        info "No unsynced instruments."
        exit 0
    fi

    info "Syncing Instruments..."
    _request "/gateway/api" '{"interfaceName":"com.quantdo.digital.product.service.InstrumentService","interfaceVersion":"1.0.0","method":"beListedInstrument","params":[{"instrumentStatus":"0"}]}'
    if [[ `echo ${RESULT} | jq .result` -eq 0 ]]; then
        info "Syncing instrument successed."
    else
        error "Syncing instrument failed."
        error "${RESULT}"
        exit 1
    fi

    info "All synced instruments: "
    _request '/digital/instrument/findAll' '{"instrumentStatus": "1"}'
    echo "${RESULT}" | jq -c '.result | .[] | select(.instrumentStatus == "1")'
}

function _sync_fee() {
    info "Syncing instrument fee..."
    _request '/gateway/api' '{"interfaceName":"com.quantdo.digital.product.service.TradeFeeSetService","interfaceVersion":"1.0.0","method":"save","params":[{"productId":"XBT","instrumentId":"XBTUSD","feeMode":"1","makerFeeRate":"0.0001","takerFeeRate":"0.0001"}]}'
    # if [[ `echo ${RESULT} | jq .result` -eq 0 ]]; then
    if [[ `echo ${RESULT} | jq .code` -eq 0 ]]; then
        info "Syncing fee successed."
    else
        error "Syncing fee failed."
        error "${RESULT}"
        exit 1
    fi
    info "All synced fee rate: "
    _request '/gateway/api' '{"interfaceName":"com.quantdo.digital.product.service.TradeFeeSetService","interfaceVersion":"1.0.0","method":"findTradeFeeSetByCondition","params":[1, 10, {}]}'
    echo "${RESULT}" | jq .result.result
}

while getopts :H:u:p:Dh FLAG; do
    case $FLAG in
        H)
            MANAGE_HOST="http://${OPTARG}"
        ;;
        u)
            MANAGE_USER=${OPTARG}
        ;;
        p)
            MANAGE_PASS=${OPTARG}
        ;;
        D)
            DRY_RUN="echo"
        ;;
        h)
            _help >&2
            exit
        ;;
        *)
            error "invalid args: $*"
        ;;
    esac
done
shift $((OPTIND-1))

if [[ $# -lt 1 ]]; then
    error "`basename ${SCRIPT_FILE}` command missing: $*"
    exit 1
fi

COMMAND=$1
shift

case ${COMMAND} in
    start)
        if [[ $# -lt 1 ]]; then
            allssh -gmanage container start serviceimpl
            info "delay 10s to wait for service starting."
            sleep 10
            allssh -gmanage container start rest
        else
            allssh -gmanage container start $*
        fi
    ;;
    stop)
        if [[ $# -lt 1 ]]; then
            allssh -gmanage container stop rest serviceimpl
        else
            allssh -gmanage container stop $*
        fi
    ;;
    kill)
        if [[ $# -lt 1 ]]; then
            allssh -gmanage container stop -f rest serviceimpl
        else
            allssh -gmanage container stop -f $*
        fi
    ;;
    status|check)
        if [[ $# -lt 1 ]]; then
            allssh -gmanage container status rest serviceimpl
        else
            allssh -gmanage container status $*
        fi
    ;;
    destory)
        if [[ $# -lt 1 ]]; then
            allssh -gmanage container stop -crf rest serviceimpl
        else
            allssh -gmanage container stop -crf $*
        fi
    ;;
    logs)
        if [[ $# -lt 1 ]]; then
            error "Missing container name."
            exit 1
        fi

        allssh -gmanage container logs --tail 100 $1
    ;;
    pub)
        allscp -gmanage "${BASE_DIR}/container.d/rest.sh"
        allscp -gmanage "${BASE_DIR}/container.d/serviceimpl.sh"
    ;;
    truncate)
        db truncate all
    ;;
    init)
        db init all
    ;;
    instrument)
        _login
        _sync_instrument
    ;;
    fee)
        _login
        _sync_fee
    ;;
    *)
        error "invalid command: ${COMMAND}"
        exit 1
    ;;
esac
