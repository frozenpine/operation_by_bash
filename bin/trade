#!/bin/bash

[[ -L $0 ]] && SCRIPT_FILE=`readlink -fn $0` || SCRIPT_FILE=$0
pushd `dirname "${SCRIPT_FILE}"` >/dev/null
BASE_DIR=`pwd`
popd >/dev/null

source "${BASE_DIR}/module.d/common.sh" || exit 1
FUNC_FILE_CONFIG="${MODULE_BASE}/config.sh"
import_functions

SERVICE_LIST=""

for SERVICE in ${SERVICE_LIST}; do
    source "${BASE_DIR}/service.d/${SERVICE}.sh" || {
        echo "service list file missing: ${SERVICE}.sh" >&2
        exit 1
    }
done

GROUP=

MODULE_LIST="order clear match tmdb tradebase index sms"

HELP_ARGS["D"]="optional,Dry run command for test."

HELP_COMMANDS["start"]="Start trade cluster/standalone."
HELP_COMMANDS["stop"]="Stop trade cluster/standalone."
HELP_COMMANDS["kill"]="Stop trade cluster/standalone forcely."
HELP_COMMANDS["status"]="Check trade cluster/standalone status."
HELP_COMMANDS["check"]="Alias command for \`status\`."
HELP_COMMANDS["destory"]="Stop trade cluster/standalone forcely & remove data files."
HELP_COMMANDS["logs"]="Get trade cluster/standalone last 100 logs."
HELP_COMMANDS["pub"]="Publish container module to all trade members."

function _find_group() {
    MODULE_PATTERN=
    for MODULE in ${MODULE_LIST}; do
        MODULE_PATTERN="${MODULE_PATTERN}|${MODULE}"
    done
    MODULE_PATTERN=${MODULE_PATTERN:1}
    
    if [[ $1 =~ ^(${MODULE_PATTERN})$ ]]; then
        GROUP=$1
        return
    fi
    
    return 1
}

function _status() {
    if [[ $# -gt 0 && ! "$*" =~ all ]]; then
        MODULE_LIST="$*"
    else
        info "checking all."
    fi

    for MODULE in ${MODULE_LIST}; do
        info "checking ${MODULE}"

        _find_group ${MODULE}
        if [[ $? -ne 0 ]]; then
            error "invalid module name: ${MODULE}"
            continue
        fi
        
        allssh -g${GROUP} container status ${MODULE}
    done
}

function _start() {
    local _ARG

    if [[ $1 =~ ^-.* ]]; then
        _ARG=$1
        shift
    fi

    if [[ $# -gt 0 && ! "$*" =~ all ]]; then
        MODULE_LIST="$*"
    else
        info "starting all."
    fi

    for MODULE in ${MODULE_LIST}; do
        info "starting ${MODULE}"

        _find_group ${MODULE}
        if [[ $? -ne 0 ]]; then
            error "invalid module name: ${MODULE}"
            continue
        fi
        
        allssh -g${GROUP} container start ${_ARG} ${MODULE}
    done
}

function _stop() {
    local _ARGS

    while getopts :crf FLAG; do
        case ${FLAG} in
            c)
                _ARGS="${_ARGS} -c"
            ;;
            r)
                _ARGS="${_ARGS} -r"
            ;;
            f)
                _ARGS="${_ARGS} -f"
            ;;
            *)
                error "invalid stop args: $*"
                exit 1
            ;;
        esac
    done
    shift $((OPTIND-1))

    if [[ $# -gt 0 && ! "$*" =~ all ]]; then
        MODULE_LIST="$*"
    else
        info "stopping all"
    fi

    for MODULE in ${MODULE_LIST}; do
        info "stoping ${MODULE}"
        
        _find_group ${MODULE}
        if [[ $? -ne 0 ]]; then
            error "invalid module name: ${MODULE}"
            continue
        fi
        
        allssh -g${GROUP} container stop ${_ARGS} ${MODULE}
    done
}

function _logs() {
    _find_group $1
    if [[ $? -ne 0 ]]; then
        error "invalid pub name: $1"
    fi

    allssh -g${GROUP} container logs --tail 100 $1
}

function _pub() {
    if [[ $# -lt 1 || "$*" =~ all ]]; then
        MODULES="order sso clear match"
    else
        MODULES="$*"
    fi

    for MOD in ${MODULES}; do
        _find_group ${MOD}
        if [[ $? -ne 0 ]]; then
            error "invalid pub name: $*"
            exit 1
        fi

        allscp -g${GROUP} "${BASE_DIR}/container.d/${MOD}.sh"
    done
}

while getopts :Dh FLAG; do
    case $FLAG in
        D)
            DRY_RUN="echo"
        ;;
        h)
            _help >&2
            exit
        ;;
        *)
            error "invalid args: $*"
        ;;
    esac
done
shift $((OPTIND-1))

if [[ $# -lt 1 ]]; then
    error "`basename ${SCRIPT_FILE}` command missing: $*"
    exit 1
fi

COMMAND=$1
shift

if [[ ${COMMAND} =~ logs|pub && $# -lt 1 ]]; then
    error "please specify module name."
    exit 1
fi

case ${COMMAND} in
    start)
        _start $*
    ;;
    stop)
        _stop $*
    ;;
    kill)
        _stop -f $*
    ;;
    status|check)
        _status $*
    ;;
    destory)
        _stop -crf $*
    ;;
    logs)
        _logs $*
    ;;
    pub)
        _pub $*
    ;;
    *)
        error "invalid command: ${COMMAND}"
        exit 1
    ;;
esac
