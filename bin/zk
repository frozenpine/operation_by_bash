#!/bin/bash

[[ -L $0 ]] && SCRIPT_FILE=`readlink -fn $0` || SCRIPT_FILE=$0
pushd `dirname "${SCRIPT_FILE}"` >/dev/null
BASE_DIR=`pwd`
popd >/dev/null

source "${BASE_DIR}/module.d/common.sh" || exit 1
FUNC_FILE_CONFIG="${MODULE_BASE}/config.sh"
import_functions

DRY_RUN=

HELP_ARGS["D"]="optional,Dry run command for test."

HELP_COMMANDS["start"]="Start zookeeper cluster/standalone."
HELP_COMMANDS["stop"]="Stop zookeeper cluster/standalone and keep container & local volume."
HELP_COMMANDS["kill"]="Kill zookeeper cluster/standalone forcely and keep container & local volume."
HELP_COMMANDS["status"]="Check zookeeper cluster/standalone status."
HELP_COMMANDS["check"]="Check zookeeper cluster/standalone status and local volume exists."
HELP_COMMANDS["restart"]="Restart zookeeper cluster/standalone."
HELP_COMMANDS["destory"]="Destory zookeeper cluster/standalone and remove container & local volume."
HELP_COMMANDS["pub"]="Publish zookeeper container module to all memeber nodes."
HELP_COMMANDS["logs"]="Get zookeeper all memeber nodes's last logs specified by \"-t NUM\", defualt: 100."
HELP_COMMANDS["shell"]="Get zookeeper container's remote shell in random memeber nodes."

SERVICE_LIST="zookeeper"

for SERVICE in ${SERVICE_LIST}; do
    source "${BASE_DIR}/service.d/${SERVICE}.sh" || {
        echo "service list file missing: ${SERVICE}.sh" >&2
        exit 1
    }
done

while getopts :dh FLAG; do
    case $FLAG in
        d)
            DRY_RUN="echo"
        ;;
        h)
            _help
            exit 1
        ;;
        *)
            error "invalid args: $*"
        ;;
    esac
done
shift $((OPTIND-1))

if [[ $# -lt 1 ]]; then
    error "`basename ${SCRIPT_FILE}` command missing: $*"
    exit 1
fi

COMMAND=$1
shift

case ${COMMAND} in
    start)
        allssh -gzookeeper container start zookeeper
    ;;
    stop)
        allssh -gzookeeper container stop zookeeper
    ;;
    kill)
        allssh -gzookeeper container stop -f zookeeper
    ;;
    check)
        allssh -gzookeeper ls -l ${DATA_BASE:=/opt}
        allssh -gzookeeper container status zookeeper
    ;;
    status)
        allssh -gzookeeper container status zookeeper
        allssh -gzookeeper container exec zookeeper bin/zkServer.sh status
    ;;
    destory)
        allssh -gzookeeper container stop -crf zookeeper
    ;;
    pub)
        allscp -gzookeeper "${CONTAINER_BASE}/zookeeper.sh"
    ;;
    exec)
        allssh -gzookeeper container exec zookeeper $*
    ;;
    logs)
        TAIL=100
        while getopts :t: FLAG; do
            case ${FLAG} in
                t)
                    TAIL=${OPTARG}
                ;;
                *)
                    error "invalid log args: $*"
                ;;
            esac
        done
        shift $((OPTIND-1))

        allssh -gzookeeper container logs --tail ${TAIL} zookeeper
    ;;
    shell)
        while getopts :s: FLAG do
            case $FLAG in
                s)
                    SHELL=${OPTARG}
                ;;
                *)
                    error "invalid shell args: $*"
                ;;
            esac
        done
        shift $((OPTIND-1))

        IDX=$((RANDOM % ${#ZOOKEEPER_LIST[@]}))
        ZK_HOST=
        COUNT=0
        for SVR_NAME in ${!ZOOKEEPER_LIST[@]}; do
            if [[ ${COUNT} -eq ${IDX} ]]; then
                ZK_HOST=${ZOOKEEPER_LIST[$SVR_NAME]}
                break
            fi

            COUNT=$((COUNT+1))
        done

        container-shell -H${ZK_HOST} -s ${SHELL:=bin/zkCli.sh} zookeeper
    ;;
    *)
        error "invalid command: ${COMMAND}"
        exit 1
    ;;
esac
